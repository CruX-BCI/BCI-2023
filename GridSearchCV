{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install scikeras[tensorflow]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hOSYG30RHk13","executionInfo":{"status":"ok","timestamp":1684300268393,"user_tz":420,"elapsed":5266,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"d400da3c-26a4-45ef-b3ab-0299040f4b6e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting scikeras[tensorflow]\n","  Downloading scikeras-0.10.0-py3-none-any.whl (27 kB)\n","Requirement already satisfied: packaging>=0.21 in /usr/local/lib/python3.10/dist-packages (from scikeras[tensorflow]) (23.1)\n","Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from scikeras[tensorflow]) (1.2.2)\n","Requirement already satisfied: tensorflow>=2.11.0 in /usr/local/lib/python3.10/dist-packages (from scikeras[tensorflow]) (2.12.0)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras[tensorflow]) (1.22.4)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras[tensorflow]) (1.10.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras[tensorflow]) (1.2.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikeras[tensorflow]) (3.1.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (1.6.3)\n","Requirement already satisfied: flatbuffers>=2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (23.3.3)\n","Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (0.4.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (0.2.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (1.54.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (3.8.0)\n","Requirement already satisfied: jax>=0.3.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (0.4.8)\n","Requirement already satisfied: keras<2.13,>=2.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (2.12.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (16.0.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (3.3.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (1.16.0)\n","Requirement already satisfied: tensorboard<2.13,>=2.12 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (2.12.2)\n","Requirement already satisfied: tensorflow-estimator<2.13,>=2.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (2.12.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (2.3.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (4.5.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.11.0->scikeras[tensorflow]) (0.32.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow>=2.11.0->scikeras[tensorflow]) (0.40.0)\n","Requirement already satisfied: ml-dtypes>=0.0.3 in /usr/local/lib/python3.10/dist-packages (from jax>=0.3.15->tensorflow>=2.11.0->scikeras[tensorflow]) (0.1.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (2.17.3)\n","Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (1.0.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (3.4.3)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (2.27.1)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (0.7.0)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (1.8.1)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (2.3.0)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (5.3.0)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (0.3.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (1.3.1)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (1.26.15)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (2022.12.7)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (3.4)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (2.1.2)\n","Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (0.5.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow>=2.11.0->scikeras[tensorflow]) (3.2.2)\n","Installing collected packages: scikeras\n","Successfully installed scikeras-0.10.0\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pspRUWD3BXZo"},"outputs":[],"source":["import numpy as np\n","import tensorflow as tf\n","from sklearn.model_selection import GridSearchCV\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from scikeras.wrappers import KerasClassifier # we need this to convert a keras model to a sci-kit learn model so it is compatible with GridSearch"]},{"cell_type":"code","source":["def create_model():\n","  model = Sequential()\n","  model.add(Dense(12, input_shape=(8,), activation='relu'))\n","  model.add(Dense(1, activation='sigmoid'))\n","  model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","  return model"],"metadata":{"id":"bviFBayfGXY-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["seed = 7\n","tf.random.set_seed(seed)"],"metadata":{"id":"ydVCDo-fHq2H"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset = np.loadtxt(\"pima-indians-diabetes.data.csv\", delimiter=\",\")\n"],"metadata":{"id":"_meQ42pMIDF1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#split dataset into input (X) and output (Y) variables\n","X = dataset[:,0:8]\n","Y = dataset[:,8]"],"metadata":{"id":"TMWqiIeZIfEb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sGEoV4D0JwNz","executionInfo":{"status":"ok","timestamp":1684300829752,"user_tz":420,"elapsed":530,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"f820f082-a17d-438e-a31e-d4ffc50a35e5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[  6.   , 148.   ,  72.   , ...,  33.6  ,   0.627,  50.   ],\n","       [  1.   ,  85.   ,  66.   , ...,  26.6  ,   0.351,  31.   ],\n","       [  8.   , 183.   ,  64.   , ...,  23.3  ,   0.672,  32.   ],\n","       ...,\n","       [  5.   , 121.   ,  72.   , ...,  26.2  ,   0.245,  30.   ],\n","       [  1.   , 126.   ,  60.   , ...,  30.1  ,   0.349,  47.   ],\n","       [  1.   ,  93.   ,  70.   , ...,  30.4  ,   0.315,  23.   ]])"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["Y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z-nGgXaVJxtX","executionInfo":{"status":"ok","timestamp":1684300833948,"user_tz":420,"elapsed":1,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"2e5986a3-a9fb-4789-f427-bc0a5df5e829"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1., 0., 1., 0., 1., 0., 1., 0., 1., 1., 0., 1., 0., 1., 1., 1., 1.,\n","       1., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.,\n","       0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0.,\n","       0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0.,\n","       0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,\n","       0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0.,\n","       0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n","       0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,\n","       1., 1., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1.,\n","       1., 1., 1., 0., 0., 1., 1., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0.,\n","       0., 0., 1., 1., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1.,\n","       1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1.,\n","       1., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n","       1., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0.,\n","       0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0.,\n","       0., 0., 1., 1., 1., 0., 0., 1., 0., 1., 0., 1., 1., 0., 1., 0., 0.,\n","       1., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 1., 0., 1., 0., 1., 1.,\n","       1., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,\n","       1., 0., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,\n","       0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,\n","       1., 0., 0., 1., 0., 0., 1., 0., 1., 1., 0., 1., 0., 1., 0., 1., 0.,\n","       1., 1., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 1.,\n","       1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,\n","       0., 1., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,\n","       1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,\n","       1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,\n","       1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,\n","       0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0.,\n","       0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n","       1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,\n","       0., 1., 1., 0., 0., 0., 1., 0., 1., 0., 1., 0., 1., 0., 1., 0., 0.,\n","       1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 1.,\n","       1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,\n","       1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1.,\n","       1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0.,\n","       0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 1., 1.,\n","       0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0.,\n","       0., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,\n","       1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 0.,\n","       1., 1., 1., 0., 0., 1., 1., 1., 0., 1., 0., 1., 0., 1., 0., 0., 0.,\n","       0., 1., 0.])"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["model = KerasClassifier(model=create_model, verbose=0)"],"metadata":{"id":"7ZnYSYGlIrAx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# define grid search parameters\n","# batch_size and epochs\n","batch_size = [10, 20, 40, 60, 80, 100]\n","epochs = [10, 50, 100]\n","param_grid = dict(batch_size=batch_size, epochs=epochs)\n","grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n","grid_result = grid.fit(X, Y)"],"metadata":{"id":"cQZm5DbGJ0IA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","    print(\"%f (%f) with: %r\" % (mean, stdev, param))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GZXvX7C1LLIP","executionInfo":{"status":"ok","timestamp":1684304004612,"user_tz":420,"elapsed":531,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"93110df4-c021-4281-e787-6ec7c21c1313"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Best: 0.703125 using {'batch_size': 20, 'epochs': 100, 'optimizer': 'Nadam'}\n","0.627604 (0.030145) with: {'batch_size': 10, 'epochs': 10, 'optimizer': 'SGD'}\n","0.606771 (0.045368) with: {'batch_size': 10, 'epochs': 10, 'optimizer': 'RMSprop'}\n","0.628906 (0.042192) with: {'batch_size': 10, 'epochs': 10, 'optimizer': 'Adagrad'}\n","0.570312 (0.071032) with: {'batch_size': 10, 'epochs': 10, 'optimizer': 'Adadelta'}\n","0.635417 (0.029635) with: {'batch_size': 10, 'epochs': 10, 'optimizer': 'Adam'}\n","0.576823 (0.037783) with: {'batch_size': 10, 'epochs': 10, 'optimizer': 'Adamax'}\n","0.583333 (0.017566) with: {'batch_size': 10, 'epochs': 10, 'optimizer': 'Nadam'}\n","0.679688 (0.013902) with: {'batch_size': 10, 'epochs': 50, 'optimizer': 'SGD'}\n","0.645833 (0.016053) with: {'batch_size': 10, 'epochs': 50, 'optimizer': 'RMSprop'}\n","0.679688 (0.014616) with: {'batch_size': 10, 'epochs': 50, 'optimizer': 'Adagrad'}\n","0.647135 (0.001841) with: {'batch_size': 10, 'epochs': 50, 'optimizer': 'Adadelta'}\n","0.662760 (0.024774) with: {'batch_size': 10, 'epochs': 50, 'optimizer': 'Adam'}\n","0.675781 (0.027251) with: {'batch_size': 10, 'epochs': 50, 'optimizer': 'Adamax'}\n","0.679688 (0.016877) with: {'batch_size': 10, 'epochs': 50, 'optimizer': 'Nadam'}\n","0.694010 (0.015733) with: {'batch_size': 10, 'epochs': 100, 'optimizer': 'SGD'}\n","0.696615 (0.030978) with: {'batch_size': 10, 'epochs': 100, 'optimizer': 'RMSprop'}\n","0.671875 (0.019137) with: {'batch_size': 10, 'epochs': 100, 'optimizer': 'Adagrad'}\n","0.683594 (0.019918) with: {'batch_size': 10, 'epochs': 100, 'optimizer': 'Adadelta'}\n","0.694010 (0.028940) with: {'batch_size': 10, 'epochs': 100, 'optimizer': 'Adam'}\n","0.687500 (0.024080) with: {'batch_size': 10, 'epochs': 100, 'optimizer': 'Adamax'}\n","0.677083 (0.024774) with: {'batch_size': 10, 'epochs': 100, 'optimizer': 'Nadam'}\n","0.516927 (0.072051) with: {'batch_size': 20, 'epochs': 10, 'optimizer': 'SGD'}\n","0.580729 (0.052634) with: {'batch_size': 20, 'epochs': 10, 'optimizer': 'RMSprop'}\n","0.584635 (0.058839) with: {'batch_size': 20, 'epochs': 10, 'optimizer': 'Adagrad'}\n","0.605469 (0.059584) with: {'batch_size': 20, 'epochs': 10, 'optimizer': 'Adadelta'}\n","0.605469 (0.030758) with: {'batch_size': 20, 'epochs': 10, 'optimizer': 'Adam'}\n","0.598958 (0.043067) with: {'batch_size': 20, 'epochs': 10, 'optimizer': 'Adamax'}\n","0.549479 (0.063335) with: {'batch_size': 20, 'epochs': 10, 'optimizer': 'Nadam'}\n","0.656250 (0.027621) with: {'batch_size': 20, 'epochs': 50, 'optimizer': 'SGD'}\n","0.626302 (0.034401) with: {'batch_size': 20, 'epochs': 50, 'optimizer': 'RMSprop'}\n","0.658854 (0.010253) with: {'batch_size': 20, 'epochs': 50, 'optimizer': 'Adagrad'}\n","0.664062 (0.009568) with: {'batch_size': 20, 'epochs': 50, 'optimizer': 'Adadelta'}\n","0.670573 (0.027866) with: {'batch_size': 20, 'epochs': 50, 'optimizer': 'Adam'}\n","0.638021 (0.011201) with: {'batch_size': 20, 'epochs': 50, 'optimizer': 'Adamax'}\n","0.635417 (0.030647) with: {'batch_size': 20, 'epochs': 50, 'optimizer': 'Nadam'}\n","0.696615 (0.007366) with: {'batch_size': 20, 'epochs': 100, 'optimizer': 'SGD'}\n","0.683594 (0.019918) with: {'batch_size': 20, 'epochs': 100, 'optimizer': 'RMSprop'}\n","0.683594 (0.012758) with: {'batch_size': 20, 'epochs': 100, 'optimizer': 'Adagrad'}\n","0.674479 (0.019488) with: {'batch_size': 20, 'epochs': 100, 'optimizer': 'Adadelta'}\n","0.674479 (0.034401) with: {'batch_size': 20, 'epochs': 100, 'optimizer': 'Adam'}\n","0.680990 (0.027866) with: {'batch_size': 20, 'epochs': 100, 'optimizer': 'Adamax'}\n","0.703125 (0.006379) with: {'batch_size': 20, 'epochs': 100, 'optimizer': 'Nadam'}\n","0.563802 (0.047343) with: {'batch_size': 40, 'epochs': 10, 'optimizer': 'SGD'}\n","0.542969 (0.076746) with: {'batch_size': 40, 'epochs': 10, 'optimizer': 'RMSprop'}\n","0.548177 (0.058492) with: {'batch_size': 40, 'epochs': 10, 'optimizer': 'Adagrad'}\n","0.540365 (0.071768) with: {'batch_size': 40, 'epochs': 10, 'optimizer': 'Adadelta'}\n","0.592448 (0.083800) with: {'batch_size': 40, 'epochs': 10, 'optimizer': 'Adam'}\n","0.545573 (0.066163) with: {'batch_size': 40, 'epochs': 10, 'optimizer': 'Adamax'}\n","0.449219 (0.008438) with: {'batch_size': 40, 'epochs': 10, 'optimizer': 'Nadam'}\n","0.619792 (0.037377) with: {'batch_size': 40, 'epochs': 50, 'optimizer': 'SGD'}\n","0.645833 (0.057880) with: {'batch_size': 40, 'epochs': 50, 'optimizer': 'RMSprop'}\n","0.605469 (0.059069) with: {'batch_size': 40, 'epochs': 50, 'optimizer': 'Adagrad'}\n","0.653646 (0.004872) with: {'batch_size': 40, 'epochs': 50, 'optimizer': 'Adadelta'}\n","0.619792 (0.035564) with: {'batch_size': 40, 'epochs': 50, 'optimizer': 'Adam'}\n","0.661458 (0.020256) with: {'batch_size': 40, 'epochs': 50, 'optimizer': 'Adamax'}\n","0.687500 (0.014616) with: {'batch_size': 40, 'epochs': 50, 'optimizer': 'Nadam'}\n","0.630208 (0.037377) with: {'batch_size': 40, 'epochs': 100, 'optimizer': 'SGD'}\n","0.661458 (0.011201) with: {'batch_size': 40, 'epochs': 100, 'optimizer': 'RMSprop'}\n","0.660156 (0.051329) with: {'batch_size': 40, 'epochs': 100, 'optimizer': 'Adagrad'}\n","0.649740 (0.019488) with: {'batch_size': 40, 'epochs': 100, 'optimizer': 'Adadelta'}\n","0.648438 (0.011500) with: {'batch_size': 40, 'epochs': 100, 'optimizer': 'Adam'}\n","0.664062 (0.038670) with: {'batch_size': 40, 'epochs': 100, 'optimizer': 'Adamax'}\n","0.687500 (0.011049) with: {'batch_size': 40, 'epochs': 100, 'optimizer': 'Nadam'}\n","0.570312 (0.061516) with: {'batch_size': 60, 'epochs': 10, 'optimizer': 'SGD'}\n","0.539062 (0.065442) with: {'batch_size': 60, 'epochs': 10, 'optimizer': 'RMSprop'}\n","0.544271 (0.008027) with: {'batch_size': 60, 'epochs': 10, 'optimizer': 'Adagrad'}\n","0.524740 (0.030978) with: {'batch_size': 60, 'epochs': 10, 'optimizer': 'Adadelta'}\n","0.578125 (0.071816) with: {'batch_size': 60, 'epochs': 10, 'optimizer': 'Adam'}\n","0.470052 (0.079566) with: {'batch_size': 60, 'epochs': 10, 'optimizer': 'Adamax'}\n","0.555990 (0.094954) with: {'batch_size': 60, 'epochs': 10, 'optimizer': 'Nadam'}\n","0.648438 (0.016877) with: {'batch_size': 60, 'epochs': 50, 'optimizer': 'SGD'}\n","0.604167 (0.033502) with: {'batch_size': 60, 'epochs': 50, 'optimizer': 'RMSprop'}\n","0.615885 (0.042830) with: {'batch_size': 60, 'epochs': 50, 'optimizer': 'Adagrad'}\n","0.641927 (0.037377) with: {'batch_size': 60, 'epochs': 50, 'optimizer': 'Adadelta'}\n","0.617188 (0.032369) with: {'batch_size': 60, 'epochs': 50, 'optimizer': 'Adam'}\n","0.635417 (0.038450) with: {'batch_size': 60, 'epochs': 50, 'optimizer': 'Adamax'}\n","0.634115 (0.040637) with: {'batch_size': 60, 'epochs': 50, 'optimizer': 'Nadam'}\n","0.658854 (0.012890) with: {'batch_size': 60, 'epochs': 100, 'optimizer': 'SGD'}\n","0.677083 (0.021236) with: {'batch_size': 60, 'epochs': 100, 'optimizer': 'RMSprop'}\n","0.652344 (0.011500) with: {'batch_size': 60, 'epochs': 100, 'optimizer': 'Adagrad'}\n","0.635417 (0.025582) with: {'batch_size': 60, 'epochs': 100, 'optimizer': 'Adadelta'}\n","0.690104 (0.019488) with: {'batch_size': 60, 'epochs': 100, 'optimizer': 'Adam'}\n","0.678385 (0.019488) with: {'batch_size': 60, 'epochs': 100, 'optimizer': 'Adamax'}\n","0.658854 (0.009744) with: {'batch_size': 60, 'epochs': 100, 'optimizer': 'Nadam'}\n","0.588542 (0.096019) with: {'batch_size': 80, 'epochs': 10, 'optimizer': 'SGD'}\n","0.608073 (0.021236) with: {'batch_size': 80, 'epochs': 10, 'optimizer': 'RMSprop'}\n","0.453125 (0.013902) with: {'batch_size': 80, 'epochs': 10, 'optimizer': 'Adagrad'}\n","0.515625 (0.025315) with: {'batch_size': 80, 'epochs': 10, 'optimizer': 'Adadelta'}\n","0.588542 (0.038051) with: {'batch_size': 80, 'epochs': 10, 'optimizer': 'Adam'}\n","0.554688 (0.071886) with: {'batch_size': 80, 'epochs': 10, 'optimizer': 'Adamax'}\n","0.574219 (0.056697) with: {'batch_size': 80, 'epochs': 10, 'optimizer': 'Nadam'}\n","0.623698 (0.043067) with: {'batch_size': 80, 'epochs': 50, 'optimizer': 'SGD'}\n","0.626302 (0.018688) with: {'batch_size': 80, 'epochs': 50, 'optimizer': 'RMSprop'}\n","0.608073 (0.042353) with: {'batch_size': 80, 'epochs': 50, 'optimizer': 'Adagrad'}\n","0.600260 (0.023510) with: {'batch_size': 80, 'epochs': 50, 'optimizer': 'Adadelta'}\n","0.583333 (0.063815) with: {'batch_size': 80, 'epochs': 50, 'optimizer': 'Adam'}\n","0.595052 (0.073172) with: {'batch_size': 80, 'epochs': 50, 'optimizer': 'Adamax'}\n","0.635417 (0.030647) with: {'batch_size': 80, 'epochs': 50, 'optimizer': 'Nadam'}\n","0.670573 (0.012890) with: {'batch_size': 80, 'epochs': 100, 'optimizer': 'SGD'}\n","0.622396 (0.030978) with: {'batch_size': 80, 'epochs': 100, 'optimizer': 'RMSprop'}\n","0.643229 (0.019225) with: {'batch_size': 80, 'epochs': 100, 'optimizer': 'Adagrad'}\n","0.680990 (0.021236) with: {'batch_size': 80, 'epochs': 100, 'optimizer': 'Adadelta'}\n","0.654948 (0.028940) with: {'batch_size': 80, 'epochs': 100, 'optimizer': 'Adam'}\n","0.666667 (0.019488) with: {'batch_size': 80, 'epochs': 100, 'optimizer': 'Adamax'}\n","0.648438 (0.003189) with: {'batch_size': 80, 'epochs': 100, 'optimizer': 'Nadam'}\n","0.598958 (0.064450) with: {'batch_size': 100, 'epochs': 10, 'optimizer': 'SGD'}\n","0.553385 (0.074481) with: {'batch_size': 100, 'epochs': 10, 'optimizer': 'RMSprop'}\n","0.485677 (0.102675) with: {'batch_size': 100, 'epochs': 10, 'optimizer': 'Adagrad'}\n","0.605469 (0.058463) with: {'batch_size': 100, 'epochs': 10, 'optimizer': 'Adadelta'}\n","0.466146 (0.025780) with: {'batch_size': 100, 'epochs': 10, 'optimizer': 'Adam'}\n","0.425781 (0.072239) with: {'batch_size': 100, 'epochs': 10, 'optimizer': 'Adamax'}\n","0.561198 (0.073450) with: {'batch_size': 100, 'epochs': 10, 'optimizer': 'Nadam'}\n","0.647135 (0.022628) with: {'batch_size': 100, 'epochs': 50, 'optimizer': 'SGD'}\n","0.593750 (0.039836) with: {'batch_size': 100, 'epochs': 50, 'optimizer': 'RMSprop'}\n","0.626302 (0.040133) with: {'batch_size': 100, 'epochs': 50, 'optimizer': 'Adagrad'}\n","0.641927 (0.066317) with: {'batch_size': 100, 'epochs': 50, 'optimizer': 'Adadelta'}\n","0.627604 (0.032106) with: {'batch_size': 100, 'epochs': 50, 'optimizer': 'Adam'}\n","0.619792 (0.021236) with: {'batch_size': 100, 'epochs': 50, 'optimizer': 'Adamax'}\n","0.604167 (0.057173) with: {'batch_size': 100, 'epochs': 50, 'optimizer': 'Nadam'}\n","0.641927 (0.044002) with: {'batch_size': 100, 'epochs': 100, 'optimizer': 'SGD'}\n","0.626302 (0.036690) with: {'batch_size': 100, 'epochs': 100, 'optimizer': 'RMSprop'}\n","0.644531 (0.037603) with: {'batch_size': 100, 'epochs': 100, 'optimizer': 'Adagrad'}\n","0.615885 (0.009744) with: {'batch_size': 100, 'epochs': 100, 'optimizer': 'Adadelta'}\n","0.644531 (0.026107) with: {'batch_size': 100, 'epochs': 100, 'optimizer': 'Adam'}\n","0.657552 (0.012890) with: {'batch_size': 100, 'epochs': 100, 'optimizer': 'Adamax'}\n","0.626302 (0.012075) with: {'batch_size': 100, 'epochs': 100, 'optimizer': 'Nadam'}\n"]}]},{"cell_type":"code","source":["# Optimizer\n","optimizer = ['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Adamax', 'Nadam']\n","param_grid = dict(optimizer=optimizer)\n","grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n","grid_result = grid.fit(X, Y)"],"metadata":{"id":"E7HrlS8KVoQp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","    print(\"%f (%f) with: %r\" % (mean, stdev, param))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yw8Wtq2bVs4A","executionInfo":{"status":"ok","timestamp":1684304052720,"user_tz":420,"elapsed":12,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"3a2ad9c6-4026-4add-f575-e9adbaaee1db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Best: 0.632812 using {'optimizer': 'Adadelta'}\n","0.597656 (0.008438) with: {'optimizer': 'SGD'}\n","0.348958 (0.001841) with: {'optimizer': 'RMSprop'}\n","0.498698 (0.121213) with: {'optimizer': 'Adagrad'}\n","0.632812 (0.022326) with: {'optimizer': 'Adadelta'}\n","0.589844 (0.088446) with: {'optimizer': 'Adam'}\n","0.621094 (0.044194) with: {'optimizer': 'Adamax'}\n","0.519531 (0.092659) with: {'optimizer': 'Nadam'}\n"]}]},{"cell_type":"code","source":["# learn rate and momentum\n","learn_rate = [0.001, 0.01, 0.1, 0.2, 0.3]\n","momentum = [0.0, 0.2, 0.4, 0.6, 0.8, 0.9]\n","param_grid = dict(optimizer__learning_rate=learn_rate, optimizer__momentum=momentum)\n","grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n","grid_result = grid.fit(X, Y)"],"metadata":{"id":"6MbHfvPkQyiP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","    print(\"%f (%f) with: %r\" % (mean, stdev, param))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f4OAWlvrULwW","executionInfo":{"status":"ok","timestamp":1684304142569,"user_tz":420,"elapsed":6,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"6e500401-7f17-4b85-9910-15e222385bf2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Best: 0.664062 using {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.2}\n","0.531250 (0.125528) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.0}\n","0.500000 (0.121199) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.2}\n","0.535156 (0.131465) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.4}\n","0.446615 (0.137195) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.6}\n","0.585938 (0.017758) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.8}\n","0.524740 (0.126951) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.9}\n","0.524740 (0.129804) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.0}\n","0.467448 (0.127790) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.2}\n","0.619792 (0.043303) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.4}\n","0.477865 (0.108269) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.6}\n","0.506510 (0.125257) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.8}\n","0.421875 (0.076613) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.9}\n","0.563802 (0.073380) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.0}\n","0.502604 (0.127591) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.2}\n","0.597656 (0.039964) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.4}\n","0.604167 (0.057084) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.6}\n","0.410156 (0.076613) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.8}\n","0.601562 (0.071816) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.9}\n","0.494792 (0.119608) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.0}\n","0.664062 (0.008438) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.2}\n","0.528646 (0.139766) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.4}\n","0.524740 (0.122548) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.6}\n","0.528646 (0.130935) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.8}\n","0.647135 (0.004872) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.9}\n","0.494792 (0.093442) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.0}\n","0.429688 (0.110485) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.2}\n","0.647135 (0.004872) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.4}\n","0.544271 (0.139475) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.6}\n","0.375000 (0.033299) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.8}\n","0.553385 (0.142719) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.9}\n"]}]},{"cell_type":"code","source":["# Neuron Activation Function\n","activation = ['softmax', 'softplus', 'softsign', 'relu', 'tanh', 'sigmoid', 'hard_sigmoid', 'linear']\n","param_grid = dict(model__activation=activation)\n","grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n","grid_result = grid.fit(X, Y)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":896},"id":"UNBx0XRXUNAi","executionInfo":{"status":"error","timestamp":1684304296106,"user_tz":420,"elapsed":1046,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"95cf82a8-7980-4193-97b2-28a7ea23f49d"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-44-60aa1f838518>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mparam_grid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel__activation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mactivation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mgrid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mgrid_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    872\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    873\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 874\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    875\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    876\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    849\u001b[0m                     )\n\u001b[1;32m    850\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 851\u001b[0;31m                 \u001b[0m_warn_or_raise_about_fit_failures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    852\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m                 \u001b[0;31m# For callable self.scoring, the return type is only know after\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_warn_or_raise_about_fit_failures\u001b[0;34m(results, error_score)\u001b[0m\n\u001b[1;32m    365\u001b[0m                 \u001b[0;34mf\"Below are more details about the failures:\\n{fit_errors_summary}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    366\u001b[0m             )\n\u001b[0;32m--> 367\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_fits_failed_message\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    368\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: \nAll the 24 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n24 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 1494, in fit\n    super().fit(X=X, y=y, sample_weight=sample_weight, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 762, in fit\n    self._fit(\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 918, in _fit\n    X, y = self._initialize(X, y)\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 855, in _initialize\n    self.model_ = self._build_keras_model()\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 431, in _build_keras_model\n    model = final_build_fn(**build_params)\nTypeError: create_model() got an unexpected keyword argument 'activation'\n"]}]},{"cell_type":"code","source":["print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","    print(\"%f (%f) with: %r\" % (mean, stdev, param))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7wmD0HWfWMnR","executionInfo":{"status":"ok","timestamp":1684304159801,"user_tz":420,"elapsed":4,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"d375a00e-b5e9-4f3e-b17f-86944aa02f50"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Best: 0.664062 using {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.2}\n","0.531250 (0.125528) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.0}\n","0.500000 (0.121199) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.2}\n","0.535156 (0.131465) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.4}\n","0.446615 (0.137195) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.6}\n","0.585938 (0.017758) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.8}\n","0.524740 (0.126951) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.9}\n","0.524740 (0.129804) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.0}\n","0.467448 (0.127790) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.2}\n","0.619792 (0.043303) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.4}\n","0.477865 (0.108269) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.6}\n","0.506510 (0.125257) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.8}\n","0.421875 (0.076613) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.9}\n","0.563802 (0.073380) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.0}\n","0.502604 (0.127591) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.2}\n","0.597656 (0.039964) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.4}\n","0.604167 (0.057084) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.6}\n","0.410156 (0.076613) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.8}\n","0.601562 (0.071816) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.9}\n","0.494792 (0.119608) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.0}\n","0.664062 (0.008438) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.2}\n","0.528646 (0.139766) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.4}\n","0.524740 (0.122548) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.6}\n","0.528646 (0.130935) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.8}\n","0.647135 (0.004872) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.9}\n","0.494792 (0.093442) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.0}\n","0.429688 (0.110485) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.2}\n","0.647135 (0.004872) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.4}\n","0.544271 (0.139475) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.6}\n","0.375000 (0.033299) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.8}\n","0.553385 (0.142719) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.9}\n"]}]},{"cell_type":"code","source":["# Tune Dropout Regularization\n","weight_constraint = [1.0, 2.0, 3.0, 4.0, 5.0]\n","dropout_rate = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n","param_grid = dict(model__dropout_rate=dropout_rate, model__weight_constraint=weight_constraint)\n","grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n","grid_result = grid.fit(X, Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":914},"id":"xOlE5LJeXF22","executionInfo":{"status":"error","timestamp":1684304342921,"user_tz":420,"elapsed":627,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"948cfb59-d5d7-4cb7-b3ef-e6f828bc087b"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-45-a045dca95e43>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mparam_grid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel__dropout_rate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdropout_rate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel__weight_constraint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mweight_constraint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mgrid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mgrid_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    872\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    873\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 874\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    875\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    876\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    849\u001b[0m                     )\n\u001b[1;32m    850\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 851\u001b[0;31m                 \u001b[0m_warn_or_raise_about_fit_failures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    852\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m                 \u001b[0;31m# For callable self.scoring, the return type is only know after\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_warn_or_raise_about_fit_failures\u001b[0;34m(results, error_score)\u001b[0m\n\u001b[1;32m    365\u001b[0m                 \u001b[0;34mf\"Below are more details about the failures:\\n{fit_errors_summary}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    366\u001b[0m             )\n\u001b[0;32m--> 367\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_fits_failed_message\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    368\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: \nAll the 150 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n150 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 1494, in fit\n    super().fit(X=X, y=y, sample_weight=sample_weight, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 762, in fit\n    self._fit(\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 918, in _fit\n    X, y = self._initialize(X, y)\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 855, in _initialize\n    self.model_ = self._build_keras_model()\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 431, in _build_keras_model\n    model = final_build_fn(**build_params)\nTypeError: create_model() got an unexpected keyword argument 'dropout_rate'\n"]}]},{"cell_type":"code","source":["print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","    print(\"%f (%f) with: %r\" % (mean, stdev, param))"],"metadata":{"id":"dZ0zvMchXc9T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Tune the Number of Neurons in each Hidden Layer\n","neurons = [1, 5, 10, 15, 20, 25, 30]\n","param_grid = dict(model__neurons=neurons)\n","grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n","grid_result = grid.fit(X, Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":896},"id":"C4t_DriZWPPb","executionInfo":{"status":"error","timestamp":1684304557275,"user_tz":420,"elapsed":529,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"c61c6095-9860-4b93-d8c3-354517c6c8b3"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-46-2025b726007e>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mparam_grid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel__neurons\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mneurons\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mgrid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_grid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mgrid_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    872\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    873\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 874\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    875\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    876\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1387\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1388\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    849\u001b[0m                     )\n\u001b[1;32m    850\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 851\u001b[0;31m                 \u001b[0m_warn_or_raise_about_fit_failures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror_score\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    852\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m                 \u001b[0;31m# For callable self.scoring, the return type is only know after\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_warn_or_raise_about_fit_failures\u001b[0;34m(results, error_score)\u001b[0m\n\u001b[1;32m    365\u001b[0m                 \u001b[0;34mf\"Below are more details about the failures:\\n{fit_errors_summary}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    366\u001b[0m             )\n\u001b[0;32m--> 367\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_fits_failed_message\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    368\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: \nAll the 21 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n21 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 1494, in fit\n    super().fit(X=X, y=y, sample_weight=sample_weight, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 762, in fit\n    self._fit(\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 918, in _fit\n    X, y = self._initialize(X, y)\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 855, in _initialize\n    self.model_ = self._build_keras_model()\n  File \"/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py\", line 431, in _build_keras_model\n    model = final_build_fn(**build_params)\nTypeError: create_model() got an unexpected keyword argument 'neurons'\n"]}]},{"cell_type":"code","source":["print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","    print(\"%f (%f) with: %r\" % (mean, stdev, param))"],"metadata":{"id":"ONFxKbH4X-7v","executionInfo":{"status":"ok","timestamp":1684304565663,"user_tz":420,"elapsed":525,"user":{"displayName":"HOWARD HUANG","userId":"03596596809995543937"}},"outputId":"57c12485-ba80-4ef6-ca76-3f18c94664f7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Best: 0.664062 using {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.2}\n","0.531250 (0.125528) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.0}\n","0.500000 (0.121199) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.2}\n","0.535156 (0.131465) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.4}\n","0.446615 (0.137195) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.6}\n","0.585938 (0.017758) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.8}\n","0.524740 (0.126951) with: {'optimizer__learning_rate': 0.001, 'optimizer__momentum': 0.9}\n","0.524740 (0.129804) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.0}\n","0.467448 (0.127790) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.2}\n","0.619792 (0.043303) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.4}\n","0.477865 (0.108269) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.6}\n","0.506510 (0.125257) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.8}\n","0.421875 (0.076613) with: {'optimizer__learning_rate': 0.01, 'optimizer__momentum': 0.9}\n","0.563802 (0.073380) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.0}\n","0.502604 (0.127591) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.2}\n","0.597656 (0.039964) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.4}\n","0.604167 (0.057084) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.6}\n","0.410156 (0.076613) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.8}\n","0.601562 (0.071816) with: {'optimizer__learning_rate': 0.1, 'optimizer__momentum': 0.9}\n","0.494792 (0.119608) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.0}\n","0.664062 (0.008438) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.2}\n","0.528646 (0.139766) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.4}\n","0.524740 (0.122548) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.6}\n","0.528646 (0.130935) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.8}\n","0.647135 (0.004872) with: {'optimizer__learning_rate': 0.2, 'optimizer__momentum': 0.9}\n","0.494792 (0.093442) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.0}\n","0.429688 (0.110485) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.2}\n","0.647135 (0.004872) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.4}\n","0.544271 (0.139475) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.6}\n","0.375000 (0.033299) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.8}\n","0.553385 (0.142719) with: {'optimizer__learning_rate': 0.3, 'optimizer__momentum': 0.9}\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"kj-09SinYBD6"},"execution_count":null,"outputs":[]}]}